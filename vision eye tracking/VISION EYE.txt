pip install ultralytics
#%%
pip install ultralytics
#%%

#%%
from collections import defaultdict
import cv2
from google.colab.patches import cv2_imshow  # For displaying images in Colab
from ultralytics import YOLO
from ultralytics.utils.plotting import Annotator, colors

# Initialize tracking history
track_history = defaultdict(lambda: [])

# Load YOLOv8 model
model = YOLO("yolov8n.pt")  # Replace with your model path if needed

# Open video file
cap = cv2.VideoCapture("/content/demo2.mp4")  # Replace with your video file path
w, h, fps = (int(cap.get(x)) for x in (cv2.CAP_PROP_FRAME_WIDTH, cv2.CAP_PROP_FRAME_HEIGHT, cv2.CAP_PROP_FPS))

# Define video writer
out = cv2.VideoWriter("visioneye-pinpoint.avi", cv2.VideoWriter_fourcc(*"MJPG"), fps, (w, h))

center_point = (-10, h)

while True:
    ret, im0 = cap.read()
    if not ret:
        print("Video frame is empty or video processing has been successfully completed.")
        break

    annotator = Annotator(im0, line_width=2)

    results = model.track(im0, persist=True)  # Ensure this method is correct for your YOLOv8 model
    boxes = results[0].boxes.xyxy.cpu()

    if results[0].boxes.id is not None:
        track_ids = results[0].boxes.id.int().cpu().tolist()

        for box, track_id in zip(boxes, track_ids):
            annotator.box_label(box, label=str(track_id), color=colors(int(track_id)))
            annotator.visioneye(box, center_point)

    # Write processed frame to video
    out.write(im0)

    # Display the frame in Colab
    cv2_imshow(im0)  # Use cv2_imshow for Colab

    # Optional: exit the loop if 'q' is pressed (doesn't work in Colab)
    # Uncomment below lines if running locally
    # if cv2.waitKey(1) & 0xFF == ord("q"):
    #     break

# Release resources
out.release()
cap.release()

# Provide a download link for the processed video in Colab
from google.colab import files
files.download("visioneye-pinpoint.avi")
